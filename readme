# BRC-420 and Bitmap Indexer
# Overview
The BRC-420 and Bitmap Indexer is a powerful tool designed to index and track both BRC-420 inscriptions and bitmap inscriptions on the Bitcoin blockchain. It processes blocks, identifies relevant inscriptions, and stores deploy, mint, and bitmap data in a SQLite database. The indexer also provides an API for querying the indexed data.

# BRC-420 Validation Process
A core feature of the BRC-420 Indexer is its robust validation process, which ensures that only valid and correctly formatted inscriptions are indexed. This validation process involves several steps:

Schema Validation
Before any inscription data is saved to the database, it undergoes schema validation using Joi, a powerful data validation library for JavaScript.

Deploy Inscriptions: 
Validated against a predefined schema that checks for required fields like id, name, max, price, deployer_address, block_height, timestamp, and source_id. Each field is validated for correct data type and format.

Mint Inscriptions: 
Validated to ensure they include fields like id, deploy_id, source_id, mint_address, transaction_id, block_height, and timestamp.
API Availability Check
The indexer checks the availability of external API services (e.g., Ordinals API and Mempool API) before proceeding with the processing, ensuring that the validation process doesnâ€™t fail due to external service downtime.

Inscription Content Validation
Once the data structure is validated, the content of the inscription is checked:

Deploy Inscriptions: 
Expected to start with {"p":"brc-420","op":"deploy"}, indicating a valid deploy operation. If detected, the data is parsed and further validated.
 
 Mint Inscriptions: 
Identified by the presence of /content/ in their data. The mint inscription is cross-referenced with the corresponding deploy inscription to ensure it is valid and within allowed limits.

Royalty Validation
For mint inscriptions, the indexer checks if the required royalty payment has been made by retrieving transaction data for the mint address and ensuring that the correct amount has been transferred to the deployerâ€™s address.

Concurrent Processing and Retry Mechanism
The indexer supports concurrent processing of inscriptions to improve efficiency. If an inscription fails validation or processing due to temporary issues (e.g., API downtime), the indexer logs the failed blocks in an error_blocks table and retries them after a configurable delay.

Database Integrity and Updates
After validation, deploy and mint data are saved in the SQLite database using transaction-safe operations, ensuring database consistency even in the event of an error. The indexer also updates the wallets table to reflect the current state of each inscription.

# Bitmap Validation
Bitmap inscriptions undergo a separate validation process:

Content Validation: The indexer checks if the inscription content includes '.bitmap', indicating a potential bitmap inscription.

Bitmap Number Extraction: The bitmap number is extracted from the content and validated to ensure it's a positive integer.

Address Retrieval: The indexer retrieves the address associated with the bitmap inscription.

Duplicate Check: The indexer checks for existing bitmaps with the same inscription ID to prevent duplicates.

Data Integrity: Validated bitmap data is stored in the database, including the inscription ID, bitmap number, content, address, and timestamp.

Features

Indexes BRC-420 deploy and mint inscriptions.
Indexes bitmap inscriptions.
Tracks wallet ownership of inscriptions.
Provides an API for querying indexed data for both BRC-420 and bitmaps.
Handles error recovery and retries for failed block processing.
Supports concurrent processing of inscriptions within blocks.

# Prerequisites
Node.js (v14 or later recommended)
npm (Node Package Manager)
SQLite3

# Installation

# Clone the repository:

git clone https://github.com/switch-900/brc-420-indexer
cd brc420-indexer

# Install dependencies:

npm install
 # Set up the database:
node db/setup.js

Configuration

Edit the setup.js file to configure the indexer:

javascript

module.exports = {
    API_URL: 'Your IP to Ordinals',
    API_WALLET_URL: 'Your IP to Mempool',
    START_BLOCK: 807604,
    RETRY_BLOCK_DELAY: 3,
    DB_PATH: './db/brc420.db',
    PORT: 5000,
    MAX_RETRIES: 3,
    RETRY_DELAY: 5000,
    CONCURRENCY_LIMIT: 5
};
Usage

# Start the indexer and API server:

npx nodemon index.js
or it oyu with to provied more memory to the codes opperations use  node --max-old-space-size=4096 index.js
The indexer will start processing blocks from the START_BLOCK defined in the configuration.

# BRC-420 Endpoints
GET /api/deploys: Retrieve deploy inscriptions by ID or name.
GET /api/mint/
: Validate a mint by its ID.
GET /api/deploy/
/mints: Retrieve mints for a specific deploy ID.
GET /api/wallet/
: Retrieve wallet information for an inscription.
GET /api/address/
/inscriptions: Retrieve all inscriptions for a specific address.
GET /api/block/
/status: Retrieve the processing status of a specific block.
GET /api/error-blocks: Retrieve blocks that encountered errors.
Note: All list endpoints support pagination using page and limit query parameters.
GET /api/deploy/:deploy_id/mints

GET /api/deploy/:deploy_id/summary
Example
curl "http://localhost:5000/api/deploy/acd5f7ae888e3ea2899533bcd0e91c3b74ca4e27d40ad9a01020ad1c6aa4b5adi0/summary"

# Bitmap Endpoints

GET /api/bitmap/:inscription_id: Retrieve a specific bitmap by its inscription ID.
GET /api/bitmaps/number/:bitmap_number: Retrieve bitmaps by bitmap number.
GET /api/address/:address/bitmaps: Retrieve all bitmaps for a specific address.
GET /api/bitmaps/summary: Get a summary of bitmap data (total count, latest bitmap number, etc.).

# Database Schema
The indexer uses a SQLite database with the following tables:

deploys: Stores deploy inscription data.
mints: Stores mint inscription data.
blocks: Tracks processed blocks.
wallets: Manages wallet ownership of inscriptions.
error_blocks: Logs blocks that encountered errors for retry.
bitmaps: Stores bitmap inscription data.

Example Queries
Retrieve all bitmap records:
SELECT * FROM bitmaps;
Retrieve bitmaps for a specific address:
SELECT * FROM bitmaps WHERE address = 'YOUR_ADDRESS';

# Database Access Endpoint
The database (brc420.db) can be accessed directly to query data related to deploys, mints, wallets, and blocks. It provides powerful query capabilities for advanced users needing direct access.

# Example Queries:

Retrieve all deploy records:

SELECT * FROM deploys;
Retrieve mints for a specific deploy ID:

SELECT * FROM mints WHERE deploy_id = 'YOUR_DEPLOY_ID';
Database Schema


# The indexer uses a SQLite database with the following tables:

deploys: Stores deploy inscription data.
mints: Stores mint inscription data.
blocks: Tracks processed blocks.
wallets: Manages wallet ownership of inscriptions.
error_blocks: Logs blocks that encountered errors for retry.
Error Handling and Retries
The indexer logs failed blocks in the error_blocks table and retries processing them after a configurable delay.

# Concurrent Processing
The indexer processes inscriptions within a block concurrently to prevent the API or system resources from being overwhelmed.

# Front end node server.js > enjoy

# Logging
The indexer uses Winston for logging. Logs are written to error.log and combined.log files.

# Contributing
Contributions are welcome! Follow these steps:

# Fork the repository.
Create a new branch for your feature.
Commit your changes.
Push to your fork.
Create a pull request.
Ensure your code adheres to the existing style and includes appropriate tests.

# License
This project is licensed under the MIT License.

# Contact
For questions or support, contact Switch9 via GitHub.

# Developed with ðŸ§¡ by Switch9.

